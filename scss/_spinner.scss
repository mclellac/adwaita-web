// scss/_spinner.scss
@use 'variables';

// Default spinner color, can be overridden by context (e.g., on dark backgrounds)
// Using accent-color as it's often indicative of an active/interactive state.
// For spinners on non-interactive waiting screens, --window-fg-color might also be an option.
// Ensure this variable choice provides good contrast.
:root {
  --spinner-color: var(--accent-color);
  --spinner-track-color: var(--shade-color); // Or a lighter/more transparent version of accent-color
}

.adw-spinner {
  display: inline-block;
  width: 24px; // Default size, can be overridden by utility classes or specific contexts
  height: 24px;
  border-radius: 50%;
  border-width: 3px; // Thickness of the spinner
  border-style: solid;
  border-color: var(--spinner-track-color);
  border-top-color: var(--spinner-color); // The colored part that 'spins'
  animation: adw-spinner-spin 0.75s linear infinite;
  vertical-align: middle; // Align with text better

  &.small {
    width: 16px;
    height: 16px;
    border-width: 2px;
  }

  &.large {
    width: 36px;
    height: 36px;
    border-width: 4px;
  }

  // Accessibility: Respect prefers-reduced-motion
  @media (prefers-reduced-motion: reduce) {
    animation: none; // Stop animation
    // Optionally, provide a static visual cue, though a static colored segment already does this.
    // border-top-color: var(--spinner-track-color); // Make it a full static circle
    // &::after { // Or add a static icon/character
    //   content: '‚è≥'; // Example: hourglass
    //   font-size: calc(0.6 * var(--width, 24px)); // Adjust size
    //   position: absolute;
    //   top: 50%;
    //   left: 50%;
    //   transform: translate(-50%, -50%);
    //   color: var(--spinner-color);
    // }
  }
}

@keyframes adw-spinner-spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
