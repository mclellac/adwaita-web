@use 'variables';
@use 'mixins';

// scss/_row_types.scss

// This file contains mixins and base styles for various types of rows
// that appear in list boxes, such as AdwActionRow, AdwComboRow, AdwExpanderRow.

// Base styles for any row that can be part of a list.
// This is not a public class, but a mixin to be included by row components.
@mixin row-base {
  display: flex;
  align-items: center;
  box-sizing: border-box;
  padding: var(--row-padding-vertical, var(--row-padding-vertical-default)) var(--row-padding-horizontal, var(--row-padding-horizontal-default));
  min-height: var(--row-min-height, 48px);
  background-color: var(--row-bg-color, transparent);
  color: var(--row-fg-color, var(--primary-fg-color));

  // By default, rows don't have borders themselves. The container (.adw-list-box) adds them.
  border: none;

  // Title and subtitle styles are common across many row types
  .adw-row-title, .adw-action-row-title, .adw-combo-row-title, .adw-expander-row-title {
    color: var(--primary-fg-color);
    font-weight: var(--font-weight-normal); // Titles in rows are typically not bold by default
  }
  .adw-row-subtitle, .adw-action-row-subtitle, .adw-combo-row-subtitle, .adw-expander-row-subtitle {
    color: var(--secondary-fg-color);
    font-size: var(--font-size-small);
  }

  // When a row is disabled
  &:disabled, &[disabled], &.disabled {
    color: var(--disabled-fg-color, rgba(var(--window-fg-color-rgb), var(--disabled-opacity)));
    cursor: default;
    pointer-events: none; // Disable interactions on the whole row

    // Also dim any icons or widgets inside
    .adw-icon, .adw-action-row-prefix, .adw-action-row-suffix {
      opacity: var(--disabled-opacity);
    }
  }
}

// Styles for rows that are clickable/activatable
@mixin row-clickable {
  cursor: pointer;
  transition: background-color var(--animation-duration-short) var(--animation-ease-out-cubic);

  &:hover {
    background-color: var(--list-row-hover-bg-color);
  }

  &:active {
    background-color: var(--list-row-active-bg-color);
  }

  // Focus state for activatable rows
  &:focus-visible {
    outline: var(--focus-ring-width) solid var(--accent-color);
    outline-offset: var(--focus-outline-offset, -2px);
    border-radius: var(--row-border-radius, var(--border-radius-small));
    z-index: 1; // Ensure focus ring is on top of other elements
  }
}

// Styles for rows that are selected
@mixin row-selected {
  background-color: var(--list-row-selected-bg-color);
  color: var(--list-row-selected-fg-color);

  // Ensure title and subtitle colors are correct for the selected state
  .adw-row-title, .adw-action-row-title, .adw-combo-row-title, .adw-expander-row-title,
  .adw-row-subtitle, .adw-action-row-subtitle, .adw-combo-row-subtitle, .adw-expander-row-subtitle {
    color: inherit; // Inherit from the row's selected foreground color
  }

  // Make icons and other elements also use the selected foreground color
  .adw-icon, .adw-action-row-prefix, .adw-action-row-suffix {
    color: inherit;
    opacity: 1.0; // Reset any dimming
  }

  // If there's a navigation arrow, it should also be visible
  &.adw-navigation-row::after {
    color: inherit;
    opacity: 0.7; // Standard opacity for chevrons on selected rows
  }
}


// --- Concrete Row Type Implementations ---

// AdwActionRow: A simple row with an optional prefix widget, title/subtitle, and suffix widget.
.adw-action-row {
  @include row-base;
  @include row-clickable; // Action rows are clickable by default

  .adw-action-row-prefix {
    margin-right: var(--spacing-m);
    flex-shrink: 0;
    display: flex;
    align-items: center;
  }

  .adw-action-row-content {
    flex-grow: 1;
    min-width: 0; // Allow shrinking and text ellipsis
  }

  .adw-action-row-title {
    display: block; // Ensure it takes up its own line
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  .adw-action-row-subtitle {
    display: block;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .adw-action-row-suffix {
    margin-left: var(--spacing-m);
    flex-shrink: 0;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  // Navigation arrow for rows that link to another view
  &.adw-navigation-row::after {
    @include mixins.navigation-arrow;
  }

  // Selected state
  &.selected, &[aria-selected="true"] {
    @include row-selected;
  }
}

// AdwExpanderRow: A row that can be expanded to reveal more content.
.adw-expander-row {
  @include row-base;
  @include row-clickable; // The header part of the expander row is clickable

  // The visible part of the row when collapsed
  .adw-expander-row-header {
    display: flex;
    align-items: center;
    width: 100%;
  }

  // The content that is revealed when expanded
  .adw-expander-row-content {
    // Hidden by default, shown when parent has .expanded class
    display: none;
    padding: var(--spacing-m);
    // Use the view background color for the expanded content area
    background-color: var(--expander-content-bg-color, var(--view-bg-color));
    // Add a separator between header and content
    border-top: var(--border-width) solid var(--list-separator-color);
  }

  &.expanded {
    .adw-expander-row-content {
      display: block;
    }
    // Change the navigation arrow to point down
    .adw-expander-row-header.adw-navigation-row::after {
      transform: rotate(90deg);
    }
  }

  // The expander row itself should not show selected state, only the header
  &.selected, &[aria-selected="true"] {
    .adw-expander-row-header {
      @include row-selected;
    }
  }
}

// AdwComboRow: A row for selecting a value from a list, often used in preferences.
.adw-combo-row {
  @include row-base;

  // Unlike ActionRow, ComboRow itself is not typically clickable.
  // The interaction is with the dropdown/button on the suffix.
  cursor: default;

  .adw-combo-row-content {
    flex-grow: 1;
  }

  .adw-combo-row-suffix {
    margin-left: var(--spacing-m);
    // The suffix for a combo row is often a dropdown or a button.
  }

  // When used in preferences, titles are often wider.
  // This can be handled by the parent container's layout.
}
