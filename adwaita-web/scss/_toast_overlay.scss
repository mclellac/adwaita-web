// scss/_toast_overlay.scss
@use 'variables';

// Styles for the <adw-toast-overlay> host element itself.
// This host element is expected to be added to the light DOM (e.g., document.body).
// Its Shadow DOM contains the .adw-toast-overlay-container.
:host(adw-toast-overlay) {
  display: block;
  position: fixed; // Take up the whole viewport to act as a layer for toasts
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none; // The overlay itself should not intercept clicks
  z-index: var(--z-index-toast-overlay, 1500); // Use the correct variable from _variables.scss
  overflow: hidden; // Should not be necessary if pointer-events: none is effective
}

// Styles for the .adw-toast-overlay-container class, which is INSIDE the Shadow DOM of <adw-toast-overlay>
// This is the `this._container` in the AdwToastOverlay JavaScript class.
.adw-toast-overlay-container {
  position: absolute; // Positioned relative to the fixed host <adw-toast-overlay>
  bottom: var(--spacing-l);
  left: 50%;
  transform: translateX(-50%);
  // For bottom-start alignment:
  // left: var(--spacing-l);
  // transform: translateX(0);
  // align-items: flex-start;

  width: max-content;
  max-width: calc(100% - (2 * var(--spacing-l))); // Ensure it doesn't touch viewport edges

  display: flex;
  flex-direction: column-reverse; // New toasts appear above older ones
  align-items: center; // Center toasts if they have varying widths
  gap: var(--spacing-s);
  // z-index for this container is relative to its host, so it doesn't need a high global value.
  // It's mostly for stacking toasts within this container if ever needed, but flex order handles that.
  z-index: 1; // Or auto
  // pointer-events: none; // Already on host, individual toasts will re-enable.

  // Individual toasts within this container
  > .adw-toast {
    pointer-events: auto; // Toasts themselves should be interactive
  }
}

// Ensure that if AdwToastOverlay is used directly (not via :host), these styles apply.
// This might be redundant if only :host(adw-toast-overlay) is used.
.adw-toast-overlay { // This selector targets elements with class "adw-toast-overlay"
  & > .adw-toast-overlay-container { // If the structure is div.adw-toast-overlay > div.adw-toast-overlay-container
    // Styles for .adw-toast-overlay-container are already defined above.
    // This block is more of a structural confirmation.
  }
}

// Variables that should be defined in _variables.scss (or used from there):
// --z-index-toast-overlay: 1500;
// --spacing-l
// --spacing-s
// AdwToast itself uses --toast-max-width.
