// Styles for Adwaita Entries (Input Fields) (Adwaita Skin Version)
// Adapted from adwaita-web/scss/_entry.scss
// @use "sass:color"; // Removed for Ruby Sass compatibility
@import 'variables'; // Defines CSS vars like --input-bg-color, --borders-color, --accent-color, etc.
@import 'mixins';    // May contain reusable mixins

// Define default values for local entry variables, these can be overridden by specific contexts (like entry-row)
// by setting these variables on the .adw-entry element itself or a parent.
:root {
  --entry-padding-vertical-default: var(--spacing-xs);      // e.g., 6px
  --entry-padding-horizontal-default: var(--spacing-s);     // e.g., 9px
  --entry-border-width-default: var(--border-width);
  --entry-border-color-default: var(--input-border-color, var(--borders-color)); // Use specific input border or general
  --entry-background-color-default: var(--input-bg-color, var(--view-bg-color)); // Adwaita entries often use view_bg_color
  --entry-inset-shadow-light-default: inset 0 1px 1px rgba(0,0,0,0.06); // Softer inset for light
  --entry-inset-shadow-dark-default: inset 0 1px 1px rgba(0,0,0,0.2);  // Slightly stronger for dark

  --entry-focus-border-color-default: var(--input-focus-border-color, var(--accent-color));
  --entry-focus-ring-shadow-default: 0 0 0 var(--focus-ring-width) var(--input-focus-border-color, var(--accent-color)); // Use focus-ring-width

  --entry-disabled-bg-color-default: var(--input-disabled-bg-color, rgba(0,0,0,0.04));
  --entry-disabled-border-color-default: var(--input-disabled-border-color, rgba(0,0,0,0.08));

  // Specific for dark theme if needed, or rely on base variable changes
  &.theme-dark {
    --entry-inset-shadow-light-default: var(--entry-inset-shadow-dark-default); // In dark, "light" shadow means the dark theme's shadow
  }
}


.adw-entry {
  // Use local variables that default to the :root defined ones, allowing overrides
  --_entry-padding-vertical: var(--entry-padding-vertical, var(--entry-padding-vertical-default));
  --_entry-padding-horizontal: var(--entry-padding-horizontal, var(--entry-padding-horizontal-default));
  --_entry-border-width: var(--entry-border-width, var(--entry-border-width-default));
  --_entry-border-color: var(--entry-border-color, var(--entry-border-color-default));
  --_entry-background-color: var(--entry-background-color, var(--entry-background-color-default));
  --_entry-inset-shadow: var(--entry-inset-shadow, var(--entry-inset-shadow-light-default)); // Default to light, overridden by .theme-dark context below
  --_entry-focus-border-color: var(--entry-focus-border-color, var(--entry-focus-border-color-default));
  --_entry-focus-ring-shadow: var(--entry-focus-ring-shadow, var(--entry-focus-ring-shadow-default));
  --_entry-disabled-bg-color: var(--entry-disabled-bg-color, var(--entry-disabled-bg-color-default));
  --_entry-disabled-border-color: var(--entry-disabled-border-color, var(--entry-disabled-border-color-default));


  display: inline-block; // Or block if it should take full width by default
  width: auto; // Default, can be overridden by parent or utility classes
  padding: var(--_entry-padding-vertical) var(--_entry-padding-horizontal);
  border-width: var(--_entry-border-width);
  border-style: solid;
  border-color: var(--_entry-border-color);
  border-radius: var(--input-border-radius, var(--border-radius-default)); // Use input-specific or general default
  background-color: var(--_entry-background-color);
  color: var(--input-fg-color, var(--text-color)); // Use input-specific or general text color
  font-family: var(--document-font-family);
  font-size: var(--font-size-base);
  line-height: $line-height-base; // SASS var for line-height is fine
  box-shadow: var(--_entry-inset-shadow);
  transition: border-color 0.1s ease-out, box-shadow 0.1s ease-out, background-color 0.1s ease-out;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  .theme-dark & { // If .adw-entry is inside a .theme-dark container
    --_entry-inset-shadow: var(--entry-inset-shadow, var(--entry-inset-shadow-dark-default));
  }

  &::placeholder {
    color: var(--input-placeholder-color, var(--text-color));
    opacity: 0.5; // Adwaita placeholders are less prominent
  }

  &:hover:not(:disabled):not(.disabled):not([readonly]) {
    border-color: var(--input-hover-border-color, var(--_entry-border-color)); // Use specific or current
    background-color: var(--input-hover-bg-color, var(--_entry-background-color));
  }

  &:focus,
  &:focus-visible {
    outline: none;
    border-color: var(--_entry-focus-border-color);
    box-shadow: var(--_entry-inset-shadow), var(--_entry-focus-ring-shadow); // Combine inset shadow with outer focus ring
    background-color: var(--input-focus-bg-color, var(--_entry-background-color)); // Allow override for focus bg
  }

  &.disabled,
  &[disabled] {
    cursor: not-allowed;
    background-color: var(--_entry-disabled-bg-color) !important; // Important to override defaults
    border-color: var(--_entry-disabled-border-color) !important;
    color: var(--input-disabled-fg-color, var(--disabled-fg-color)) !important;
    opacity: var(--opacity-disabled); // Use global disabled opacity
    box-shadow: none !important;
    pointer-events: none;

    &::placeholder {
      color: var(--input-disabled-fg-color, var(--disabled-fg-color)); // Match disabled text color
      opacity: var(--opacity-disabled); // Ensure placeholder also reflects disabled state opacity
    }
  }

  &.readonly,
  &[readonly] {
    background-color: var(--input-readonly-bg-color, var(--_entry-background-color));
    border-color: var(--input-readonly-border-color, var(--_entry-border-color));
    color: var(--input-readonly-fg-color, var(--text-color-secondary));
    cursor: default;
    box-shadow: var(--_entry-inset-shadow); // Keep inset shadow for readonly

    &:hover {
      border-color: var(--input-readonly-border-color, var(--_entry-border-color)); // No hover change for border
    }
    &:focus,
    &:focus-visible {
      border-color: var(--input-readonly-border-color, var(--_entry-border-color)); // No focus border change
      box-shadow: var(--_entry-inset-shadow); // Keep only inset shadow, no focus ring
    }
  }

  // Variant for entries used within rows (e.g., AdwEntryRow / .adw-entry-row)
  // This class should be added to the <input class="adw-entry row-input">
  &.row-input {
    --_entry-border-width: 0 0 1px 0; // Only bottom border
    --_entry-border-color: var(--input-border-color, var(--borders-color)); // Use standard border color for the line
    border-radius: 0; // No border radius for a clean line
    background-color: transparent; // Transparent background
    box-shadow: none; // Remove inset shadow
    padding-left: 0;
    padding-right: 0;
    // Vertical padding might need adjustment to align text in row, use current --_entry-padding-vertical

    &:focus,
    &:focus-visible {
      --_entry-border-color: var(--_entry-focus-border-color); // Accent color for focus
      border-width: 0 0 2px 0; // Thicker bottom border on focus for rows (GTK style)
      box-shadow: none; // No outer focus ring for row-input, just the accent border
    }

    &.disabled,
    &[disabled] {
      border-color: transparent !important; // No border for disabled row inputs
      background-color: transparent !important;
    }
  }

  // Error and Success states
  &.error {
    border-color: var(--destructive-color) !important; // Use important if very specific overrides are needed
    // color: var(--destructive-color); // Optional: change text color too

    &:focus,
    &:focus-visible {
      border-color: var(--destructive-color) !important;
      box-shadow: var(--_entry-inset-shadow), 0 0 0 var(--focus-ring-width) #{rgba($sass-accent-red-light-bg, 0.5)}; // Destructive focus ring
      .theme-dark & {
        box-shadow: var(--_entry-inset-shadow), 0 0 0 var(--focus-ring-width) #{rgba($sass-accent-red-dark-bg, 0.6)};
      }
    }
  }

  &.success {
    border-color: var(--success-color) !important;
    &:focus,
    &:focus-visible {
      border-color: var(--success-color) !important;
      box-shadow: var(--_entry-inset-shadow), 0 0 0 var(--focus-ring-width) #{rgba($sass-accent-green-light-bg, 0.5)}; // Success focus ring
      .theme-dark & {
        box-shadow: var(--_entry-inset-shadow), 0 0 0 var(--focus-ring-width) #{rgba($sass-accent-green-dark-bg, 0.6)};
      }
    }
  }
}

// Styles for <textarea> elements that should look like Adwaita entries
// Apply class .adw-textarea
.adw-textarea {
  @extend .adw-entry; // Inherit all styles from .adw-entry

  resize: vertical; // Allow vertical resize by default
  min-height: calc(var(--font-size-base) * #{$line-height-base} * 3 + (var(--_entry-padding-vertical) * 2) + (var(--_entry-border-width) * 2)); // Approx 3 lines of text
}


// Wrapper for entries with icons (if not handled by AdwEntryRow structure)
.adw-entry-wrapper {
  display: inline-flex;
  align-items: center;
  position: relative; // For positioning icons absolutely within the wrapper

  // The .adw-entry element when inside a wrapper
  > .adw-entry {
    // Adjust padding if icons are present
    &.with-icon-start {
      padding-left: calc(var(--_entry-padding-horizontal) + #{$icon-size-base} + var(--spacing-xs));
    }
    &.with-icon-end {
      padding-right: calc(var(--_entry-padding-horizontal) + #{$icon-size-base} + var(--spacing-xs));
    }
  }

  .adw-entry-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--input-placeholder-color); // Icon color often matches placeholder
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: $icon-size-base;
    height: $icon-size-base;
    pointer-events: none; // By default, icons are not interactive

    svg { // If using SVGs directly for icons
      width: 100%;
      height: 100%;
      fill: currentColor;
    }

    &.start {
      left: var(--_entry-padding-horizontal);
    }
    &.end {
      right: var(--_entry-padding-horizontal);
    }

    &.interactive { // If the icon itself is clickable (e.g., clear button)
      pointer-events: auto;
      cursor: pointer;
      color: var(--text-color-secondary);
      &:hover {
        color: var(--text-color);
      }
    }
  }
}

// Remove spinner from number inputs for WebKit/Blink (Chrome, Edge, Safari)
input[type="number"].adw-entry {
  -webkit-appearance: textfield; /* Safari and Chrome */
  -moz-appearance: textfield; /* Firefox */
  appearance: textfield;
}
input[type="number"].adw-entry::-webkit-inner-spin-button,
input[type="number"].adw-entry::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

// Remove clear button from search inputs for WebKit/Blink
input[type="search"].adw-entry::-webkit-search-decoration,
input[type="search"].adw-entry::-webkit-search-cancel-button,
input[type="search"].adw-entry::-webkit-search-results-button,
input[type="search"].adw-entry::-webkit-search-results-decoration {
  display: none;
}
