@use 'variables';
@use 'mixins'; // Assuming this provides .row-base and potentially other helpers

.adw-expander-row {
  // The AdwExpanderRow element itself is a container for the header and content.
  // It typically takes full width within a listbox.
  // The header part (.adw-expander-row-header) is an AdwActionRow.

  .adw-expander-row-header.adw-action-row {
    // This is the clickable header part. AdwActionRow styles should apply.
    // Ensure it's clearly interactive.
    cursor: pointer;
    // AdwActionRow already has padding, min-height, etc.
    // We might want to ensure it doesn't have a bottom border if the expander row itself handles it,
    // or if it's the last item before the content area.
    // However, usually the ActionRow's own bottom border serves as the separator.

    // Chevron icon styling (targets the AdwIcon component, slotted as suffix-widget)
    // The AdwIcon component itself should handle its color.
    .adw-expander-row-chevron.adw-icon {
      transition: transform var(--animation-duration-short) var(--animation-ease-out-sine);
      transform: rotate(-90deg); // Point right for LTR when collapsed (assuming pan-down icon)
      opacity: var(--icon-opacity, 0.7); // Use a variable for icon opacity
      // font-size: 0.8em; // Remove font-size if using direct width/height for SVG mask
      display: flex;
      align-items: center;
      justify-content: center; // Center the mask content
      width: var(--icon-size-small, 14px); // Standard icon size, adjust if needed for chevrons
      height: var(--icon-size-small, 14px);
      background-color: currentColor; // To color the mask
      -webkit-mask-image: url('../data/icons/symbolic/pan-down-symbolic.svg');
      mask-image: url('../data/icons/symbolic/pan-down-symbolic.svg');
      -webkit-mask-repeat: no-repeat;
      mask-repeat: no-repeat;
      -webkit-mask-position: center;
      mask-position: center;
      -webkit-mask-size: contain; // Or 100% 100%
      mask-size: contain;
    }

    // When the header (and thus the row) is expanded
    &.expanded {
      .adw-expander-row-chevron.adw-icon {
        transform: rotate(0deg); // Point down when expanded
      }
      // Optionally, slightly change header background when expanded, if needed.
      // background-color: var(--list-row-hover-bg-color);
    }
  }

  .adw-expander-row-content-area {
    // Default Libadwaita indentation for content is often related to where text starts in the header.
    // A common indentation is 24px (var(--spacing-xl)) or 12px (var(--spacing-m)).
    // The existing padding was: var(--spacing-m) var(--spacing-l) with a complex left padding.
    // Let's simplify:
    padding: var(--spacing-m) var(--spacing-l) var(--spacing-m) var(--spacing-xl); // Top, Right, Bottom, Left
    background-color: var(--expander-content-bg-color, var(--window-bg-color)); // Define --expander-content-bg-color or use a fallback

    // The header (ActionRow) typically provides the top separator with its bottom border.
    // Content area itself usually doesn't have additional borders unless it's forming a new visual group.
    // border-top: var(--border-width) solid var(--border-color); // Removed
    // border-bottom: var(--border-width) solid var(--border-color); // Removed

    display: none; // Hidden by default

    &.visible { // Class added by JS when expanded
      display: block;
    }

    // If the expander row is the last child in a listbox, its content area's bottom border
    // might need to be removed or have its radius adjusted.
    .adw-list-box > .adw-expander-row:last-child & {
      border-bottom-left-radius: var(--list-border-radius, var(--border-radius-default));
      border-bottom-right-radius: var(--list-border-radius, var(--border-radius-default));
      // If the listbox itself has a border, the last row's content shouldn't double border.
      // This depends on how .adw-list-box handles its own bottom border/padding.
      // For now, assume the content area border is fine.
    }

    // Styles for direct children (e.g. if it contains other rows)
    > .adw-row, > adw-action-row, > adw-entry-row { // Targeting known row types
        // If child rows are directly inside, their default left/right padding might need adjustment
        // if the content area's padding is meant to be the primary horizontal padding.
        // Example: margin-left: calc(-1 * var(--spacing-l)); margin-right: calc(-1 * var(--spacing-l));
        // However, it's often better to let child rows have their standard padding for consistency.
    }
  }

  // When the whole expander row is part of a listbox and is the last child
  // This rule was on .adw-expander-row:last-child > .adw-expander-row-content-area
  // It's better handled by the nested selector above for specificity with .adw-list-box context.
}

// Ensure AdwActionRow (used as header) styling is correctly applied.
// This is more of a reminder that AdwActionRow's own SCSS should be solid.

// Variables that should be defined (e.g., in _variables.scss):
// --expander-content-bg-color: (e.g., var(--window-bg-color) or a slightly offset color like mix(var(--view-fg-color), var(--view-bg-color), 4%));
// --icon-opacity: 0.7; (general icon opacity)
// --list-border-radius: (used by listbox for its corners)


// --- Basic CSS-only Expander Row (uses <details> and <summary>) ---
// From _app-demo-specific.scss
.adw-css-expander-row {
    summary.adw-action-row {
        list-style: none; // Remove default marker
        position: relative;
        // Assuming .adw-action-row itself has appropriate padding

        &::-webkit-details-marker {
            display: none; // Hide WebKit default marker
        }

        // Custom chevron for the CSS-only version
        &::after {
            content: '';
            display: inline-block;
            width: 0.5em;
            height: 0.5em;
            border-right: 0.15em solid currentColor;
            border-bottom: 0.15em solid currentColor;
            transform: rotate(45deg); // Default: pointing down-right (expanded look)
            transition: transform 0.2s ease-out;
            position: absolute;
            right: var(--row-padding-horizontal, var(--spacing-m)); // Align with row padding
            top: 50%;
            margin-top: -0.35em; // Adjust vertical based on chevron size and border
            opacity: var(--icon-opacity, 0.7);
        }
    }

    // State when collapsed (details not open)
    &:not([open]) > summary.adw-action-row::after {
        transform: rotate(-45deg); // Pointing right (collapsed look for LTR)
                                   // Adwaita usually points right when collapsed, down when open.
                                   // Original app-demo had rotate(45deg) for collapsed (down-right),
                                   // and rotate(-135deg) for open (up-right).
                                   // Let's align with typical Adwaita: right for collapsed, down for open.
                                   // A typical "pan-end-symbolic" icon is used.
                                   // If using border-based chevron:
                                   // Collapsed (pointing right): transform: rotate(-45deg);
                                   // Expanded (pointing down): transform: rotate(45deg);
    }
     // State when open
    &[open] > summary.adw-action-row::after {
        transform: rotate(45deg); // Pointing down
    }


    .adw-expander-row-content { // Content for the CSS-only version
        // padding: var(--spacing-m); // Original padding
        // Let's use more standard content padding, similar to JS version
        padding: var(--spacing-m) var(--spacing-l) var(--spacing-m) var(--spacing-xl);
        white-space: pre-wrap; // For preserving formatting in bio (app-demo specific need)
        border-top: 1px solid var(--border-color); // Use the standard border color variable
        // margin-top: -1px; // Collapses border with summary when open - this might not be needed if summary has no bottom border
        background-color: var(--expander-content-bg-color, var(--window-bg-color));

        // If the expander row is the last child in a listbox, its content area's bottom border
        // might need to be removed or have its radius adjusted.
        .adw-list-box > &.adw-css-expander-row:last-child & {
            // This rule might be too complex or not needed if listbox handles its children's borders.
            // For now, assume content has its own padding and background, and doesn't need special last-child border radius.
        }
    }
}
