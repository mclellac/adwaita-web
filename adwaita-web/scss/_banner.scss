@use 'variables';
@use 'mixins';

.adw-banner {
  // Banners are typically placed at the top of a view or window.
  // They are not part of a listbox structure usually.
  padding: var(--spacing-s) var(--spacing-m); // Slightly less vertical padding than rows
  background-color: var(--banner-bg-color); // Use theme-defined default
  color: var(--banner-fg-color); // Use theme-defined default
  // No border-radius by default, as it usually spans full width.
  // border-radius: var(--border-radius-default);
  border-bottom: var(--border-width) solid var(--banner-border-color); // Use theme-defined default
  // margin-bottom: var(--spacing-m); // Margin is context-dependent, parent should handle normally
  box-sizing: border-box; // Ensure padding doesn't affect width calculation for fixed positioning

  // Positioning: Fixed at the top, full width, overlaying content
  position: fixed;
  top: 0;
  left: 0;
  right: 0; // Ensures full width
  z-index: var(--z-index-banner, 1000); // Ensure it's above most other content

  display: flex;
  justify-content: space-between; // Pushes title and button apart
  align-items: center;
  gap: var(--spacing-m); // Gap between title and button if both are present

  // Animation for reveal/hide
  opacity: 0;
  // Transform from slightly above its final position to slide down into view
  transform: translateY(calc(-100% - var(--border-width, 1px) - 10px)); // Start further up for a slide-in effect
  transition: opacity var(--animation-duration-medium) var(--animation-ease-out-cubic),
              transform var(--animation-duration-medium) var(--animation-ease-out-cubic);
  // Ensure it's not clickable when hidden
  visibility: hidden;
  pointer-events: none;
  // position: relative; // No longer relative, now fixed

  &.visible {
    opacity: 1;
    transform: translateY(0);
    visibility: visible;
    pointer-events: auto;
  }

  .adw-banner-title {
    flex-grow: 1; // Title takes available space
    font-size: var(--font-size-base);
    font-weight: normal; // Banners usually have normal weight text
    // Text alignment: Libadwaita centers if enough space, else left-aligns.
    // Default to left-align for simplicity in CSS. Centering would require more complex checks or JS.
    text-align: left;
    min-width: 0; // For ellipsis if title is very long
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .adw-banner-button.adw-button {
    // Styling for the AdwButton component when used inside a banner
    flex-shrink: 0; // Button should not shrink
    // AdwButton's own styles (default, .suggested, .flat) will apply.
    // Ensure it aligns well with the text.
    // Example: if button is too tall, adjust its internal padding or line-height.
  }

  // Specific styling for the dismiss button in a banner
  .adw-banner-dismiss-button.adw-button.flat {
    // This is now a text button, styled as flat.
    // Ensure good contrast and alignment.
    // Flex properties on .adw-banner should handle alignment.
    // Default flat button styling from _button.scss will apply.
    // We can add specific overrides here if needed, e.g., for margin or color.
    // margin-left: var(--spacing-s); // Add some space if gap on parent isn't enough
    // color: var(--banner-secondary-fg-color, var(--secondary-fg-color)); // If a different color is needed for dismiss
  }

  // Styling for the main action button, if present and needing distinction
  .adw-banner-button.adw-button {
      // This is the optional action button, not the dismiss button.
      // AdwButton's own styles apply. If it needs specific banner context styling:
      // Example: make it less prominent than a normal button if the banner is informational
      // &.flat {
      //   background-color: transparent; // Ensure truly flat if it's a flat action button
      // }
  }


  // If a banner needs to be themed for specific contexts (e.g. error, warning)
  // this can be done by adding classes to the AdwBanner element itself.
  // Default/Info banner uses the main --banner-bg-color, --banner-fg-color, --banner-border-color
  // The AdwBanner JS adds .adw-banner-info if type is 'info' or it's the default.
  // So, explicit .adw-banner-info class styling might not be needed if defaults are set correctly.

  &.adw-banner-error {
    background-color: var(--banner-error-bg-color);
    color: var(--banner-error-fg-color);
    border-bottom-color: var(--banner-error-border-color);

    // Ensure buttons within error banners have appropriate contrast or style
    .adw-banner-button, // Main action button
    .adw-banner-dismiss-button { // Dismiss button
      // For flat buttons on a dark error background, text might need to be light.
      // AdwButton's .flat style typically uses `color: var(--accent-color)` or `currentColor`.
      // If `currentColor` (banner-error-fg-color) is light, this should be fine.
      // If specific adjustments are needed:
      // color: var(--banner-error-fg-color); // Ensure button text matches banner's fg
      // &:hover { background-color: rgba(255,255,255,0.1); } // Example hover for light text on dark bg
    }
  }
  // Add .adw-banner-warning, .adw-banner-success if those types are supported and variables defined
}

// Variables that should be defined in _variables.scss (within theme mixins):
// --banner-bg-color (for default/info)
// --banner-fg-color (for default/info)
// --banner-border-color (for default/info)
// --banner-error-bg-color
// --banner-error-fg-color
// --banner-error-border-color
// etc. for other types
