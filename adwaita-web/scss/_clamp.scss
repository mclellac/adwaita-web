// scss/_clamp.scss
@import 'variables';

.adw-clamp {
  display: flex;
  justify-content: center;
  width: 100%; // Clamp itself should take available width to center its child.

  &.scrollable {
    // When the clamp itself is scrollable, its child wrapper usually is not the one scrolling,
    // but rather the clamp might have a fixed height and its content (the child wrapper) overflows.
    // This setup seems more like the child-wrapper might scroll if clamp has fixed height.
    // For typical clamp usage (restricting width, not usually for scrolling the clamp itself):
    // overflow: visible; // Default, let content flow.

    // If the intent of AdwClamp.scrollable is that the *content inside the clamp* scrolls
    // once it hits its max-width and if the content is taller than available height:
    // This would typically be handled by the parent container of AdwClamp or by sizing AdwClamp itself.
    // Let's assume .scrollable on .adw-clamp means the content *within* the child wrapper can scroll
    // if the clamp is given a constrained height.
    // However, the JS sets overflow on the .adw-clamp element.
    overflow-y: auto;
    overflow-x: hidden; // Usually clamps are for width, horizontal scroll is rare.
    // height: 100%; // Often needed for scrollable clamps to fill parent allocated space.
  }

  .adw-clamp-child-wrapper {
    width: 100%; // Takes full width up to its own max-width.
                 // If clamp is scrollable, this ensures it uses the scrollable area.
    // max-width is set by JS via inline style on this element.
  }
}

// No specific dark theme styles needed for AdwClamp itself.
